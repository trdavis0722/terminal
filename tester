import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense
import yfinance as yf  # For Yahoo Finance data (you may need to install this library)

# Fetch historical Yahoo stock data for Yahoo Inc. (ticker symbol: YHOO)
yahoo_data = yf.download('YHOO', start='2020-01-01', end='2021-01-01')

# Extract the 'Close' prices as the target variable
target = yahoo_data['Close']

# Create features (e.g., using 'Open' and 'Volume' as features)
features = yahoo_data[['Open', 'Volume']]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Linear Regression Model
linear_reg = LinearRegression()
linear_reg.fit(X_train, y_train)

# Make predictions
linear_reg_predictions = linear_reg.predict(X_test)

# Calculate RMSE (Root Mean Squared Error) as a metric
rmse = np.sqrt(mean_squared_error(y_test, linear_reg_predictions))
print(f'Linear Regression RMSE: {rmse}')

# Keras Sequential Model
model = Sequential()
model.add(Dense(10, input_dim=2, activation='relu'))  # Two input features
model.add(Dense(1))  # Output layer

model.compile(loss='mean_squared_error', optimizer='adam')

# Fit the model
model.fit(X_train, y_train, epochs=50, batch_size=10)

# Make predictions
keras_predictions = model.predict(X_test)

# Calculate RMSE
keras_rmse = np.sqrt(mean_squared_error(y_test, keras_predictions))
print(f'Keras Model RMSE: {keras_rmse}')
